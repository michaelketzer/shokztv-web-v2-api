variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

stages:
  - test
  - build
  - deploy_staging
  - integration_tests
  - deploy_production
  - sentry
  - notification

sonarcloud-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - develop

include:
  stage: test
  template: Dependency-Scanning.gitlab-ci.yml

build:
  stage: build
  image: node:13.1.0
  before_script:
    - yarn config set cache-folder .yarn
    - yarn install
  cache:
    paths:
      - node_modules/
      - .yarn
  artifacts:
    paths:
      - lib/
  script:
    - echo "Building"
    - yarn run build

deploy_staging:
  stage: deploy_staging
  needs:
    - job: build
      artifacts: true
  image: node:13.1.0
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  only:
    - master
  script:
    - echo "Uploading build artifacts"
    - scp -P22 -r package.json $STAGING_USER@$STAGING_HOST:api
    - scp -P22 -r yarn.lock $STAGING_USER@$STAGING_HOST:api
    - scp -P22 -r lib/* $STAGING_USER@$STAGING_HOST:api/lib
    - ssh -p22 $STAGING_USER@$STAGING_HOST "cd api && yarn install"
    - ssh -p22 $STAGING_USER@$STAGING_HOST "pm2 start api/lib/index.js --name=$CI_PROJECT_TITLE"

postman:
  stage: integration_tests
  needs:
    - job: deploy_staging
      artifacts: false
  image: wojciechzurek/newman-ci
  script:
    - newman run $POSTMAN_COLLECTION -e $POSTMAN_ENV

shutdown_staging:
  stage: deploy_production
  needs:
    - job: postman
      artifacts: false
  image: node:13.1.0
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  only:
    - master
  script:
    - echo "Shutdown service"
    - ssh -p22 $STAGING_USER@$STAGING_HOST "pm2 stop $CI_PROJECT_TITLE"

deploy_prod:
  stage: deploy_production
  needs:
    - job: build
      artifacts: true
    - job: postman
      artifacts: false
  image: node:13.1.0
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PROD_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  only:
    - master
  script:
    - echo "Uploading build artifacts"
    - scp -P22 -r package.json $PROD_USER@$PROD_HOST:api
    - scp -P22 -r yarn.lock $PROD_USER@$PROD_HOST:api
    - scp -P22 -r lib/* $PROD_USER@$PROD_HOST:api/lib
    - ssh -p22 $PROD_USER@$PROD_HOST "cd api && yarn install"
    - ssh -p22 $PROD_USER@$PROD_HOST "pm2 restart $CI_PROJECT_TITLE"

sentry:
  image: 
    name: getsentry/sentry-cli:1.49.0
    entrypoint: [""]
  stage: sentry
  needs:
    - job: build
      artifacts: true
    - job: deploy_prod
      artifacts: false
  script:
    - echo "Uploading JavaScript files to Sentry..."
    - export SENTRY_AUTH_TOKEN=$SENTRY_BASE_TOKEN
    - export SENTRY_ORG=$SENTRY_BASE_ORGANIZATION
    - export SENTRY_PROJECT=$SENTRY_BASE_PROJECT
    - sentry-cli releases new -p $SENTRY_BASE_PROJECT "$CI_COMMIT_SHA"
    - sentry-cli releases files "$CI_COMMIT_SHA" upload-sourcemaps --no-rewrite ./lib/
    - sentry-cli releases set-commits --auto "$CI_COMMIT_SHA"
    - sentry-cli releases finalize "$CI_COMMIT_SHA"
    - sentry-cli releases deploys "$CI_COMMIT_SHA" new -e production
  only:
    - master

success_notification:
  stage: notification
  script:
    - echo "Success notification"
    - wget https://raw.githubusercontent.com/DiscordHooks/gitlab-ci-discord-webhook/master/send.sh
    - chmod +x send.sh
    - ./send.sh success $WEBHOOK_URL
  when: on_success
failure_notification:
  stage: notification
  script:
    - echo "Failure notification"
    - wget https://raw.githubusercontent.com/DiscordHooks/gitlab-ci-discord-webhook/master/send.sh
    - chmod +x send.sh
    - ./send.sh failure $WEBHOOK_URL
  when: on_failure